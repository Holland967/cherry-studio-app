# 文件名: .github/workflows/expo-build.yml
name: Build Expo Android APK

# 触发条件
on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch: # 允许手动运行

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # 增加超时时间，防止大型项目构建超时

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境（LTS 版本）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn' # 缓存 node_modules，加速后续构建

      # 3. 🔑 启用 Corepack 并激活项目指定的 Yarn 版本（解决 Yarn 4.9.1 问题）
      - name: Enable Corepack and Use Project Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      # 4. 安装项目依赖（现在会使用正确的 Yarn 4.9.1）
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 5. 执行 drizzle-kit generate（根据你的数据库 schema 生成文件）
      - name: Generate Drizzle Schema
        run: npx drizzle-kit generate

      # 6. 设置 JDK 17（Expo Prebuild 需要）
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 7. 设置 Android SDK（包含 cmdline-tools, build-tools, platform-tools）
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # 8. 执行 Expo Prebuild —— 生成原生 android/ 和 ios/ 项目
      - name: Expo Prebuild (Android)
        run: npx expo prebuild -p android --clean
        # --clean 确保每次构建都是干净的，避免缓存问题

      # 9. 进入 android 目录，构建 APK
      - name: Build Android APK
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew assembleDebug

      # 10. 上传生成的 APK 文件
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          # Expo 项目标准输出路径

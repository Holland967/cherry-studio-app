# 文件名: .github/workflows/expo-build.yml
name: Build Expo Android APK

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch: # 允许手动触发。

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境 (Expo 项目必需)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18 # 选择一个稳定的 LTS 版本
          cache: 'yarn' # 缓存依赖，加速后续构建

      # 3. 安装项目依赖
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 4. 执行 drizzle-kit generate (根据你的需求)
      - name: Generate Drizzle Schema
        run: npx drizzle-kit generate

      # 5. 设置 JDK (Expo Prebuild 需要)
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 6. 设置 Android SDK (Expo Prebuild 需要)
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # 7. 执行 Expo Prebuild 生成原生 Android 项目
      - name: Expo Prebuild (Android)
        run: npx expo prebuild -p android --clean
        # --clean 确保每次都是干净的构建

      # 8. 进入 android 目录并构建 APK
      - name: Build Android APK
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew assembleDebug

      # 9. 上传生成的 APK
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: expo-app-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          # 注意：Expo 项目生成的 APK 路径通常是 android/app/... 而不是 android/...
